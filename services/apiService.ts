// services/apiService.ts
import { tokenService } from './tokenService';

const API_BASE_URL = 'https://api.poupadin.space/api';

// Armazena a promessa de renova√ß√£o para evitar m√∫ltiplas chamadas simult√¢neas
let isRefreshing = false;
let refreshPromise: Promise<string | null> | null = null;

// Fun√ß√£o para renovar o token
const refreshToken = async (): Promise<string | null> => {
  console.log('üîÑ [API_SERVICE] Iniciando renova√ß√£o de token');
  
  const currentRefreshToken = await tokenService.getRefreshToken();
  if (!currentRefreshToken) {
    console.log('‚ùå [API_SERVICE] Refresh token n√£o encontrado');
    // Se n√£o houver refresh token, for√ßa o logout
    // A l√≥gica de logout ser√° chamada no AuthContext que detectar√° a falha
    return null; 
  }

  try {
    console.log('üì§ [API_SERVICE] Enviando requisi√ß√£o de renova√ß√£o');
    const response = await fetch(`${API_BASE_URL}/auth/refresh`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ refreshToken: currentRefreshToken }),
    });

    const data = await response.json();
    console.log('üì® [API_SERVICE] Resposta da renova√ß√£o recebida:', {
      status: response.status,
      ok: response.ok,
      hasAccessToken: !!data.accessToken,
      hasRefreshToken: !!data.refreshToken
    });

    if (!response.ok) {
      console.log('‚ùå [API_SERVICE] Renova√ß√£o falhou:', data.message);
      throw new Error(data.message || 'Sess√£o expirada');
    }

    // Validar tokens na resposta
    if (!data.accessToken || typeof data.accessToken !== 'string') {
      console.error('‚ùå [API_SERVICE] Access token inv√°lido na renova√ß√£o');
      throw new Error('Token de acesso inv√°lido na resposta');
    }

    if (!data.refreshToken || typeof data.refreshToken !== 'string') {
      console.error('‚ùå [API_SERVICE] Refresh token inv√°lido na renova√ß√£o');
      throw new Error('Token de atualiza√ß√£o inv√°lido na resposta');
    }

    // Armazena os novos tokens
    console.log('üíæ [API_SERVICE] Salvando novos tokens');
    await tokenService.setAccessToken(data.accessToken);
    await tokenService.setRefreshToken(data.refreshToken);

    console.log('‚úÖ [API_SERVICE] Token renovado com sucesso');
    return data.accessToken;
  } catch (error) {
    console.error('‚ùå [API_SERVICE] Falha ao renovar o token:', error);
    // Em caso de falha na renova√ß√£o, limpa os dados
    await tokenService.clearAllData();
    // For√ßa a necessidade de um novo login
    return null;
  }
};

// Interceptor de API
const fetchWithAuth = async (url: string, options: RequestInit = {}): Promise<Response> => {
  console.log(`üåê [API_SERVICE] Fazendo requisi√ß√£o autenticada para: ${url}`);
  
  let accessToken = await tokenService.getAccessToken();
  console.log(`üé´ [API_SERVICE] Access token ${accessToken ? 'encontrado' : 'n√£o encontrado'}`);

  if (!accessToken) {
    console.error('‚ùå [API_SERVICE] Access token n√£o encontrado');
    throw new Error('Token de acesso n√£o encontrado. Fa√ßa login novamente.');
  }

  // Adiciona o token de autoriza√ß√£o aos headers
  const newOptions: RequestInit = {
    ...options,
    headers: {
      ...options.headers,
      'Content-Type': 'application/json',
      Authorization: `Bearer ${accessToken}`,
    },
  };


  let response = await fetch(`${API_BASE_URL}${url}`, newOptions);
  console.log(`üì® [API_SERVICE] Resposta recebida:`, {
    status: response.status,
    statusText: response.statusText,
    ok: response.ok
  });

  // Se o token expirou (401), tenta renov√°-lo
  if (response.status === 401) {
    console.log('üîí [API_SERVICE] Token expirado (401), tentando renovar');
    
    if (!isRefreshing) {
      console.log('üîÑ [API_SERVICE] Iniciando processo de renova√ß√£o');
      isRefreshing = true;
      refreshPromise = refreshToken();
    } else {
      console.log('‚è≥ [API_SERVICE] Aguardando renova√ß√£o em andamento');
    }

    const newAccessToken = await refreshPromise;
    isRefreshing = false;
    refreshPromise = null;

    if (newAccessToken) {
      console.log('‚úÖ [API_SERVICE] Token renovado, repetindo requisi√ß√£o original');
      // Repete a chamada original com o novo token
      newOptions.headers = {
        ...newOptions.headers,
        Authorization: `Bearer ${newAccessToken}`,
      };
      response = await fetch(`${API_BASE_URL}${url}`, newOptions);
      console.log(`üì® [API_SERVICE] Nova resposta ap√≥s renova√ß√£o:`, {
        status: response.status,
        statusText: response.statusText,
        ok: response.ok
      });
    } else {
      console.log('‚ùå [API_SERVICE] Falha na renova√ß√£o, retornando resposta 401 original');
      // Se a renova√ß√£o falhou, a resposta original (de erro) √© retornada
      // e o AuthContext ir√° tratar o logout
      return response;
    }
  }

  return response;
};

// Classe do servi√ßo de API
class ApiService {
  async post<T>(endpoint: string, data: any): Promise<T> {
    console.log(`üì§ [API_SERVICE] POST ${endpoint}:`, {
      hasData: !!data,
      dataType: typeof data,
      dataKeys: data && typeof data === 'object' ? Object.keys(data) : 'N/A'
    });

    try {
      const response = await fetchWithAuth(endpoint, {
        method: 'POST',
        body: JSON.stringify(data),
      });

      // Ler texto da resposta primeiro para debug
      const responseText = await response.text();
      console.log(`üìù [API_SERVICE] Resposta bruta (${response.status}):`, responseText.substring(0, 200) + '...');

      let responseData;
      try {
        responseData = JSON.parse(responseText);
      } catch (parseError) {
        console.error('‚ùå [API_SERVICE] Erro ao parsear JSON da resposta:', parseError);
        console.log('üìù [API_SERVICE] Resposta completa:', responseText);
        throw new Error('Resposta inv√°lida do servidor');
      }

      if (!response.ok) {
        console.log(`‚ùå [API_SERVICE] Erro HTTP ${response.status}:`, responseData);
        const error: any = new Error(responseData.message || 'Erro na requisi√ß√£o');
        error.status = response.status;
        error.body = responseData;
        throw error;
      }

      console.log(`‚úÖ [API_SERVICE] POST ${endpoint} sucesso`);
      return responseData;
    } catch (error) {
      console.error(`‚ùå [API_SERVICE] Erro em POST ${endpoint}:`, error);
      throw error;
    }
  }
  
  async get<T>(endpoint: string): Promise<T> {
    console.log(`üì• [API_SERVICE] GET ${endpoint}`);

    try {
      const response = await fetchWithAuth(endpoint);

      // Ler texto da resposta primeiro para debug
      const responseText = await response.text();
      console.log(`üìù [API_SERVICE] Resposta bruta (${response.status}):`, responseText.substring(0, 200) + '...');

      let responseData;
      try {
        responseData = JSON.parse(responseText);
      } catch (parseError) {
        console.error('‚ùå [API_SERVICE] Erro ao parsear JSON da resposta:', parseError);
        console.log('üìù [API_SERVICE] Resposta completa:', responseText);
        throw new Error('Resposta inv√°lida do servidor');
      }

      if (!response.ok) {
        console.log(`‚ùå [API_SERVICE] Erro HTTP ${response.status}:`, responseData);
        const error: any = new Error(responseData.message || 'Erro na requisi√ß√£o');
        error.status = response.status;
        error.body = responseData;
        throw error;
      }

      console.log(`‚úÖ [API_SERVICE] GET ${endpoint} sucesso`);
      return responseData;
    } catch (error) {
      console.error(`‚ùå [API_SERVICE] Erro em GET ${endpoint}:`, error);
      throw error;
    }
  }

  async put<T>(endpoint: string, data: any): Promise<T> {
    console.log(`üîÑ [API_SERVICE] PUT ${endpoint}:`, {
      hasData: !!data,
      dataType: typeof data,
      dataKeys: data && typeof data === 'object' ? Object.keys(data) : 'N/A'
    });

    try {
      const response = await fetchWithAuth(endpoint, {
        method: 'PUT',
        body: JSON.stringify(data),
      });

      const responseText = await response.text();
      console.log(`üìù [API_SERVICE] Resposta bruta (${response.status}):`, responseText.substring(0, 200) + '...');

      let responseData;
      try {
        responseData = JSON.parse(responseText);
      } catch (parseError) {
        console.error('‚ùå [API_SERVICE] Erro ao parsear JSON da resposta:', parseError);
        throw new Error('Resposta inv√°lida do servidor');
      }

      if (!response.ok) {
        console.log(`‚ùå [API_SERVICE] Erro HTTP ${response.status}:`, responseData);
        const error: any = new Error(responseData.message || 'Erro na requisi√ß√£o');
        error.status = response.status;
        error.body = responseData;
        throw error;
      }

      console.log(`‚úÖ [API_SERVICE] PUT ${endpoint} sucesso`);
      return responseData;
    } catch (error) {
      console.error(`‚ùå [API_SERVICE] Erro em PUT ${endpoint}:`, error);
      throw error;
    }
  }

  async delete<T>(endpoint: string): Promise<T> {
    console.log(`üóëÔ∏è [API_SERVICE] DELETE ${endpoint}`);

    try {
      const response = await fetchWithAuth(endpoint, {
        method: 'DELETE',
      });

      const responseText = await response.text();
      console.log(`üìù [API_SERVICE] Resposta bruta (${response.status}):`, responseText.substring(0, 200) + '...');

      let responseData;
      try {
        responseData = JSON.parse(responseText);
      } catch (parseError) {
        console.error('‚ùå [API_SERVICE] Erro ao parsear JSON da resposta:', parseError);
        throw new Error('Resposta inv√°lida do servidor');
      }

      if (!response.ok) {
        console.log(`‚ùå [API_SERVICE] Erro HTTP ${response.status}:`, responseData);
        const error: any = new Error(responseData.message || 'Erro na requisi√ß√£o');
        error.status = response.status;
        error.body = responseData;
        throw error;
      }

      console.log(`‚úÖ [API_SERVICE] DELETE ${endpoint} sucesso`);
      return responseData;
    } catch (error) {
      console.error(`‚ùå [API_SERVICE] Erro em DELETE ${endpoint}:`, error);
      throw error;
    }
  }
}

export const apiService = new ApiService();